import numpy as np

print("=== Smart Home Energy Scheduler ===")
n_devices = int(input("Enter number of devices: "))

devices = []
for i in range(n_devices):
    print(f"\nEnter details for Device {i+1}:")
    name = input("Device name: ")
    duration = int(input(f"How many hours does {name} need to run? "))
    start_window = int(input(f"Earliest start hour (0-23): "))
    end_window = int(input(f"Latest end hour (0-23): "))
    power = float(input(f"Power consumption (kWh per hour): "))
    
    devices.append({
        "name": name,
        "duration": duration,
        "start_window": start_window,
        "end_window": end_window,
        "power": power
    })

price = np.array([
    6, 6, 5, 5, 4, 4, 5, 6, 7, 8, 8, 9,
    9, 9, 8, 8, 7, 6, 5, 4, 4, 4, 5, 5
])

num_wolves = 15
max_iter = 40
dim = n_devices

wolves = np.zeros((num_wolves, dim))
for i in range(num_wolves):
    for j, dev in enumerate(devices):
        wolves[i, j] = np.random.randint(
            dev["start_window"],
            dev["end_window"] - dev["duration"] + 1
        )

def fitness(schedule):
    total_cost = 0
    for i, dev in enumerate(devices):
        start = int(schedule[i])
        for h in range(start, start + dev["duration"]):
            total_cost += dev["power"] * price[h % 24]
    return total_cost

alpha, beta, delta = np.zeros(dim), np.zeros(dim), np.zeros(dim)
alpha_score, beta_score, delta_score = float("inf"), float("inf"), float("inf")

for iteration in range(max_iter):
    for i in range(num_wolves):
        for j, dev in enumerate(devices):
            if wolves[i, j] < dev["start_window"]:
                wolves[i, j] = dev["start_window"]
            if wolves[i, j] > dev["end_window"] - dev["duration"]:
                wolves[i, j] = dev["end_window"] - dev["duration"]
        score = fitness(wolves[i])
        if score < alpha_score:
            alpha_score, alpha = score, wolves[i].copy()
        elif score < beta_score:
            beta_score, beta = score, wolves[i].copy()
        elif score < delta_score:
            delta_score, delta = score, wolves[i].copy()
    a = 2 - iteration * (2 / max_iter)
    for i in range(num_wolves):
        for j in range(dim):
            r1, r2 = np.random.rand(), np.random.rand()
            A1, C1 = 2 * a * r1 - a, 2 * r2
            D_alpha = abs(C1 * alpha[j] - wolves[i, j])
            X1 = alpha[j] - A1 * D_alpha
            r1, r2 = np.random.rand(), np.random.rand()
            A2, C2 = 2 * a * r1 - a, 2 * r2
            D_beta = abs(C2 * beta[j] - wolves[i, j])
            X2 = beta[j] - A2 * D_beta
            r1, r2 = np.random.rand(), np.random.rand()
            A3, C3 = 2 * a * r1 - a, 2 * r2
            D_delta = abs(C3 * delta[j] - wolves[i, j])
            X3 = delta[j] - A3 * D_delta
            wolves[i, j] = (X1 + X2 + X3) / 3
    if (iteration + 1) % 10 == 0:
        print(f"Iteration {iteration+1}/{max_iter} | Best Cost: {alpha_score:.2f}")

print("\nâœ… Optimal Schedule Found:")
for i, dev in enumerate(devices):
    print(f"{dev['name']}: Start at hour {int(alpha[i])}, End at {int(alpha[i] + dev['duration'])}")

print(f"\nðŸ’° Minimum Total Energy Cost = {alpha_score:.2f} units")
